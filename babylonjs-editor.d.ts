// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../babylonjs
//   ../../dat-gui
//   ../../babylonjs-gui
//   ../../golden-layout

declare module 'babylonjs-editor' {
    import Editor from 'babylonjs-editor/editor/editor';
    import Tools from 'babylonjs-editor/editor/tools/tools';
    import UndoRedo from 'babylonjs-editor/editor/tools/undo-redo';
    import Layout from 'babylonjs-editor/editor/gui/layout';
    import Toolbar from 'babylonjs-editor/editor/gui/toolbar';
    import List from 'babylonjs-editor/editor/gui/list';
    import Grid, { GridRow } from 'babylonjs-editor/editor/gui/grid';
    import Picker from 'babylonjs-editor/editor/gui/picker';
    import Graph, { GraphNode } from 'babylonjs-editor/editor/gui/graph';
    import Window from 'babylonjs-editor/editor/gui/window';
    import CodeEditor from 'babylonjs-editor/editor/gui/code';
    import Form from 'babylonjs-editor/editor/gui/form';
    import Edition from 'babylonjs-editor/editor/gui/edition';
    import Tree, { ContextMenuItem, TreeNode } from 'babylonjs-editor/editor/gui/tree';
    import AbstractEditionTool from 'babylonjs-editor/editor/edition-tools/edition-tool';
    import { IStringDictionary, IDisposable, INumberDictionary } from 'babylonjs-editor/editor/typings/typings';
    import { EditorPlugin } from 'babylonjs-editor/editor/typings/plugin';
    import { ProjectRoot } from 'babylonjs-editor/editor/typings/project';
    export default Editor;
    export { Tools, UndoRedo, IStringDictionary, INumberDictionary, IDisposable, EditorPlugin, Layout, Toolbar, List, Grid, GridRow, Picker, Graph, GraphNode, Window, CodeEditor, Form, Edition, Tree, ContextMenuItem, TreeNode, AbstractEditionTool, ProjectRoot };
}

declare module 'babylonjs-editor/editor/editor' {
    import { Scene, FreeCamera, Camera, FilesInput } from 'babylonjs';
    import { IStringDictionary } from 'babylonjs-editor/editor/typings/typings';
    import { IEditorPlugin } from 'babylonjs-editor/editor/typings/plugin';
    import Core, { IUpdatable } from 'babylonjs-editor/editor/core';
    import Layout from 'babylonjs-editor/editor/gui/layout';
    import ResizableLayout from 'babylonjs-editor/editor/gui/resizable-layout';
    import EditorToolbar from 'babylonjs-editor/editor/components/toolbar';
    import EditorGraph from 'babylonjs-editor/editor/components/graph';
    import EditorEditionTools from 'babylonjs-editor/editor/components/edition';
    import EditorEditPanel from 'babylonjs-editor/editor/components/edit-panel';
    import Stats from 'babylonjs-editor/editor/components/stats';
    import ScenePicker from 'babylonjs-editor/editor/scene/scene-picker';
    import SceneIcons from 'babylonjs-editor/editor/scene/scene-icons';
    export default class Editor implements IUpdatable {
            core: Core;
            camera: FreeCamera;
            playCamera: Camera;
            layout: Layout;
            resizableLayout: ResizableLayout;
            toolbar: EditorToolbar;
            graph: EditorGraph;
            edition: EditorEditionTools;
            editPanel: EditorEditPanel;
            stats: Stats;
            plugins: IStringDictionary<IEditorPlugin>;
            scenePicker: ScenePicker;
            sceneIcons: SceneIcons;
            filesInput: FilesInput;
            sceneFile: File;
            guiFiles: File[];
            projectFile: File;
            _showReloadDialog: boolean;
            /**
                * Constructor
                * @param scene: a scene to edit. If undefined, a default scene will be created
                */
            constructor(scene?: Scene);
            /**
                * Runs the editor and Babylon.js engine
                */
            run(): void;
            /**
             * Resizes elements
             */
            resize(): void;
            /**
                * On after render the scene
                */
            onPostUpdate(): void;
            /**
                * Adds an "edit panel" plugin
                * @param url the URL of the plugin
                * @param restart: if to restart the plugin
                * @param name: the name of the plugin to show
                * @param params: the params to give to the plugin's constructor
                */
            addEditPanelPlugin(url: string, restart?: boolean, name?: string, ...params: any[]): Promise<IEditorPlugin>;
            /**
                * Removes the given plugin
                * @param plugin: the plugin to remove
                */
            removePlugin(plugin: IEditorPlugin): Promise<void>;
            /**
                * Restarts the plugins already loaded
                */
            restartPlugins(): Promise<void>;
            /**
                * Creates the default scene
                * @param showNewSceneDialog: if to show a dialog to confirm creating default scene
                */
            createDefaultScene(showNewSceneDialog?: boolean): Promise<void>;
            /**
                * Creates the editor camera
                */
            protected createEditorCamera(): Camera;
    }
}

declare module 'babylonjs-editor/editor/tools/tools' {
    import { IStringDictionary } from 'babylonjs-editor/editor/typings/typings';
    export default class Tools {
            /**
                * Creates a div element
                * @param style: the div's style
                */
            static CreateElement<T extends HTMLElement>(type: string, id: string, style?: IStringDictionary<string>): T;
            /**
             * Returns the constructor name of the given object
             * @param obj the object
             */
            static GetConstructorName(obj: any): string;
            /**
                * Returns if the browser is running in Electron
                */
            static IsElectron(): boolean;
            /**
             * Returns the file type for the given extension
             */
            static GetFileType(extension: string): string;
            /**
                * Creates a window popup
                * @param url the URL of the popup
                * @param name: the name of the popup
                * @param width the width of the popup
                * @param height the height of the popup
                */
            static OpenPopup(url: string, name: string, width: number, height: number): Window;
            /**
             * Returns the file extension
             * @param filename: the file's name
             */
            static GetFileExtension(filename: string): string;
            /**
             * Returns the filename without extension
             * @param filename: the filename (path)
             * @param withPath: if the return value should contain all path
             */
            static GetFilenameWithoutExtension(filename: string, withPath?: boolean): string;
            /**
                * Returns the filename
                * @param filename: the complete filename with path
                */
            static GetFilename(filename: string): string;
            /**
                * Creates an open file dialog
                * @param callback called once the user selects files
                */
            static OpenFileDialog(callback?: (files: File[]) => void): Promise<File[]>;
            /**
                * Returns the base url of the window
                */
            static GetBaseURL(): string;
            /**
                * Sorts the given string array alphabetically
                * @param arr: the array to sort
                * @param property: the property to take
                */
            static SortAlphabetically(arr: any[], property?: string): void;
            /**
                * Creates a new File (blob today to fix Edge compatibility)
                * @param buffer the file's buffer
                * @param filename the file's name
                */
            static CreateFile(buffer: Uint8Array, filename: string): File;
            /**
                * Loads a file using HTTP request
                * @param url the url of the file
                * @param arrayBuffer if should load file as arraybuffer
                */
            static LoadFile<T extends string | ArrayBuffer>(url: string, arrayBuffer?: boolean): Promise<T>;
            /**
                * Loads a file and creates a new File added to the FilesToLoad
                * @param url: the URLof the file
                */
            static CreateFileFromURL(url: string): Promise<File>;
            /**
                * Creates an URL and downloads the given file
                * @param file the file to download
                */
            static DownloadFile(file: File): void;
            /**
             * Converts a string to an UInt8Array
            $ @param str: the string to convert
             */
            static ConvertStringToUInt8Array(str: string): Uint8Array;
            /**
                * Reads the given file
                * @param file the file to read
                * @param arrayBuffer if should read as array buffer
                */
            static ReadFile<T extends string | ArrayBuffer>(file: File, arrayBuffer: boolean): Promise<T>;
            /**
                * Reads a file as base 64
                * @param file the file to read
                */
            static ReadFileAsBase64(file: File): Promise<string>;
            /**
                * Reads a file as text
                * @param file the file to read
                */
            static ReadFileAsText(file: File): Promise<string>;
            /**
                * Reads a file as array buffer
                * @param file the file to read
                */
            static ReadFileAsArrayBuffer(file: File): Promise<ArrayBuffer>;
            /**
                * Imports a new script returning its exported object
                * @param url the URL / NAME of the script
                */
            static ImportScript<T>(url: string): Promise<T>;
            /**
                * According to the navigator, returns if the file API
                * is supported
                */
            static isFileApiSupported(showAlert?: boolean): boolean;
    }
}

declare module 'babylonjs-editor/editor/tools/undo-redo' {
    export interface StackElement {
            baseObject?: any;
            property?: string;
            to?: any;
            from?: any;
            object?: any;
            fn?: (type?: 'from' | 'to') => void;
    }
    export default class UndoRedo {
            static Stack: StackElement[];
            static CurrentIndex: number;
            static StackSize: number;
            static onUndo: (element: StackElement) => void;
            static onRedo: (element: StackElement) => void;
            /**
                * Pushes a new element in the stack
                * @param element the element to push in the stack
                */
            static Push(element: StackElement): void;
            /**
                * Pops an element from the undo/redo stack
                */
            static Pop(): void;
            /**
                * Clears the undo / redo stack
                */
            static Clear(): void;
            /**
                * Undo an action
                */
            static Undo(): StackElement;
            /**
                * Redo an action
                */
            static Redo(): StackElement;
    }
}

declare module 'babylonjs-editor/editor/gui/layout' {
    export default class Layout {
            element: W2UI.W2Layout;
            name: string;
            panels: W2UI.W2Panel[];
            /**
                * Constructor
                * @param name the layout name
                */
            constructor(name: string);
            /**
                * Returns the size of the given panel
                */
            getPanelSize(type: string): {
                    width: number;
                    height: number;
            };
            /**
                * Locks the given panel type
                * @param type the panel type
                * @param message the message to show
                * @param showSpinner if to show a spinner
                */
            lockPanel(type: string, message?: string, showSpinner?: boolean): void;
            /**
                * Unlocks the given panel
                * @param type the panel type
                */
            unlockPanel(type: string): void;
            /**
                * Returns the panel from the given type
                * @param type the panel type
                */
            getPanelFromType(type: string): W2UI.W2Panel;
            /**
                * Builds the layout
                * @param parentId the parent id
                */
            build(parentId: string): void;
    }
}

declare module 'babylonjs-editor/editor/gui/toolbar' {
    export interface W2Item extends W2UI.W2Item {
            html?: string;
    }
    export default class Toolbar {
            name: string;
            items: W2Item[];
            right: string;
            element: W2UI.W2Toolbar;
            onClick: (target: string) => void;
            /**
                * Constructor
                * @param name the graph name
                */
            constructor(name: string);
            /**
                * Returns if the given item is checked
                * @param id the id of the element (menu, item, etc.)
                */
            isChecked(id: string, justClicked?: boolean): boolean;
            /**
                * Sets an item checked or unchecked
                * @param id the id of the item
                * @param checked if the item is checked or not
                */
            setChecked(id: string, checked: boolean): void;
            /**
                * Builds the graph
                * @param parentId the parent id
                */
            build(parentId: string): void;
    }
}

declare module 'babylonjs-editor/editor/gui/list' {
    export default class List {
            name: string;
            element: JQuery;
            input: JQuery;
            items: string[];
            onChange: (selected: string) => void;
            /**
                * Constructor
                * @param name the name of the list
                */
            constructor(name: any);
            /**
                * Sets the new items
                * @param items the new items
                */
            setItems(items: string[]): void;
            /**
                * Sets the selected item
                * @param text: the item's text
                */
            setSelected(text: string): void;
            /**
                * Returns the selected value of the list
                */
            getSelected(): string;
            /**
                * Builds the element
                * The parent HTML element
                */
            build(parent: HTMLElement, style?: string): void;
    }
}

declare module 'babylonjs-editor/editor/gui/grid' {
    export interface GridRow {
            recid?: number;
            w2ui?: {
                    style?: string;
            };
    }
    export interface GridColumn {
            field: string;
            caption: string;
            size: string;
            editable?: {
                    type: string;
            };
    }
    export interface GridOptions {
            toolbar?: boolean;
            footer?: boolean;
            toolbarEdit?: boolean;
            toolbarDelete?: boolean;
            toolbarAdd?: boolean;
            toolbarSearch?: boolean;
            toolbarColumns?: boolean;
            toolbarReload?: boolean;
            header?: string;
            columnsHeaders?: boolean;
            multiSelect?: boolean;
    }
    export default class Grid<T extends GridRow> {
            name: string;
            element: W2UI.W2Grid;
            options: GridOptions;
            columns: GridColumn[];
            onClick: (selected: number[]) => void;
            onAdd: () => void;
            onDelete: (ids: number[]) => void;
            onChange: (recid: number, value: string) => void;
            onEdit: (recid: number) => void;
            /**
                * Constructor
                * @param name the name of the grid
                */
            constructor(name: string, options?: GridOptions);
            /**
                * Sets the options of the grid
                * @param options options of the grid
                */
            setOptions(options: GridOptions): void;
            /**
             * Adds a new row to the grid and refreshes itself
             * @param record the row record to add
             */
            addRow(record: T): void;
            /**
                * Adds a new record to the grid but does not refreshes itself
                * @param record the record to add
                */
            addRecord(record: T): void;
            /**
                * Returns the row at the given index
                * @param selected the row index
                */
            getRow(selected: number): T;
            /**
                * Sets the selected items
                * @param selected the selected items
                */
            select(selected: number[]): void;
            /**
                * Returns the selected rows
                */
            getSelected(): number[];
            /**
             * Builds the grid
             * @param parentId the parent id
             */
            build(parentId: string): void;
    }
}

declare module 'babylonjs-editor/editor/gui/picker' {
    import Window from 'babylonjs-editor/editor/gui/window';
    import Grid, { GridRow } from 'babylonjs-editor/editor/gui/grid';
    export interface PickerItem {
            name?: string | null;
            id?: string | null;
    }
    export interface Row extends GridRow {
            name: string;
    }
    export default class Picker {
            items: string[];
            selected: string[];
            window: Window;
            grid: Grid<Row>;
            title: string;
            /**
                * Constructor
                */
            constructor(title: string);
            /**
                * Adds the given items to pick
                * @param items: items to add
                */
            addItems(items: PickerItem[]): void;
            /**
                * Clears the current items
                */
            clear(): void;
            /**
                * Adds the given items as selected
                * @param items: items to add
                */
            addSelected(items: PickerItem[]): void;
            /**
                * Closes the picker
                */
            close(): void;
            /**
                * Builds the object picker
                * @param callback: called when user clicks the button "ok"
                */
            open(callback: (items: {
                    id: number;
                    name: string;
            }[], selected?: number[]) => void): void;
            /**
                * Adds current items to the grid
                */
            refreshGrid(): void;
    }
}

declare module 'babylonjs-editor/editor/gui/graph' {
    export interface GraphNode {
            id: string;
            text: string;
            img?: string;
            data?: any;
            count?: number;
    }
    export interface GraphMenu {
            id: string;
            text: string;
            img: string;
    }
    export default class Graph {
            name: string;
            element: W2UI.W2Sidebar;
            topContent: string;
            bottomContent: string;
            onClick: <T>(id: string, data: T) => void;
            onMenuClick: <T>(id: string, node: GraphNode) => void;
            /**
                * Constructor
                * @param name the graph name
                */
            constructor(name: string);
            /**
                * Clear the graph
                */
            clear(): void;
            /**
                * Adds the given node to the graph
                * @param node: the node to add into the graph
                * @param parent: the optional parent of the node
                */
            add(node: GraphNode, parent?: string): void;
            /**
                * Adds a context menu item to the graph when the user
                * right clicks on the node
                * @param menu the menu to add
                */
            addMenu(menu: GraphMenu): void;
            /**
                * Builds the graph
                * @param parentId the parent id
                */
            build(parentId: string): void;
    }
}

declare module 'babylonjs-editor/editor/gui/window' {
    export default class Window {
            name: string;
            element: W2UI.W2Popup;
            title: string;
            body: string;
            buttons: string[];
            width: number;
            height: number;
            showMax: boolean;
            showClose: boolean;
            onButtonClick: (id: string) => void;
            onClose: () => void;
            onMax: () => void;
            onMin: () => void;
            onToggle: () => void;
            /**
                * Constructor
                * @param name: the name of the window
                */
            constructor(name: string);
            /**
                * Closes the window
                */
            close(): void;
            /**
                * Locks the window
                * @param message: the message to draw
                */
            lock(message: string): void;
            /**
                * Unlocks the window
                */
            unlock(): void;
            /**
                * Opens the window
                */
            open(): void;
            /**
                * Opens a window alert
                * @param message: the message to show
                * @param title: the title of the window alert
                */
            static CreateAlert(message: string, title?: string): void;
    }
}

declare module 'babylonjs-editor/editor/gui/code' {
    import { IDisposable } from 'babylonjs-editor/editor/typings/typings';
    export interface MonacoDisposable extends IDisposable {
            [index: string]: any;
    }
    export interface TypescriptDisposable extends IDisposable {
            [index: string]: any;
    }
    export default class CodeEditor {
            editor: MonacoDisposable;
            onChange: (value: string) => void;
            static ExternalLibraries: string;
            static ExtraLibs: {
                    lib: MonacoDisposable;
                    caller: Window;
            }[];
            /**
                * Remove extra lib from the registered callers
                * @param caller the caller reference (Window)
                */
            static RemoveExtraLib(caller: Window): void;
            /**
                * Constructor
                */
            constructor(language?: string, value?: string);
            /**
                * Returns the editor's value
                */
            getValue(): string;
            /**
                * Sets the value of the editor
                * @param value the value to set
                */
            setValue(value: string): void;
            /**
                * Builds the code editor
                * @param parentId the parent id of the editor
                */
            build(parentId: string | HTMLElement, caller?: Window): Promise<void>;
            /**
                * Transpiles the given TS source to JS source
                * @param source the source to transpile
                */
            transpileTypeScript(source: string, moduleName: string): string;
            /**
                * Creates a windowed editor
                * @param options: the editor's configuration
                */
            static CreateWindowedEditor(options: {
                    name: string;
                    data: any;
                    baseData: any;
                    property: string;
                    baseEditor: CodeEditor;
            }): Promise<void>;
    }
}

declare module 'babylonjs-editor/editor/gui/form' {
    export interface FormField {
            name: string;
            type: 'text' | 'float' | 'int' | 'alphanumeric' | 'enum' | 'list' | string;
            required?: boolean;
            options?: {
                    items?: string[];
            };
    }
    export default class Form {
            element: W2UI.W2Form;
            name: string;
            fields: FormField[];
            /**
                * Constructor
                * @param name the name of the form
                */
            constructor(name: string);
            /**
                * Returns if the form is valid
                */
            isValid(): boolean;
            /**
                * Builds the form
                * @param parentId the parent id of the form
                */
            build(parentId: string): void;
    }
}

declare module 'babylonjs-editor/editor/gui/edition' {
    import { Color3, Color4, Vector2, Vector3, Vector4, BaseTexture } from 'babylonjs';
    import * as dat from 'dat-gui';
    import Editor from 'babylonjs-editor/editor/editor';
    export default class Edition {
            element: dat.GUI;
            /**
                * Constructor
                */
            constructor();
            /**
                * Adds a folder
                * @param name the folder name
                */
            addFolder(name: string): dat.GUI;
            /**
                * Add a gui controller
                * @param target the target object
                * @param propName the property of the object
                */
            add(target: any, propName: string, other?: string[]): dat.GUIController;
            /**
                * Removes the dat element
                */
            remove(): void;
            /**
                * Updates the display of all elements
                * @param folder: the root folder
                */
            updateDisplay(folder?: dat.GUI): void;
            /**
                * Call the given callback on each recursive onFinishChange
                * @param folder the root folder
                * @param callback the callback when a property changed
                */
            onFinishChange(folder: dat.GUI, callback: (property: string, result: any, object?: any, initialValue?: any) => void): void;
            /**
                * Call the given callback on each recursive onChange
                * @param folder the root folder
                * @param callback the callback when a property changed
                */
            onChange(folder: dat.GUI, callback: (property: string, result: any, object?: any, initialValue?: any) => void): void;
            /**
                * Returns a controller identified by its property name
                * @param property the property used by the controller
                * @param parent the parent folder
                */
            getController(property: string, parent?: dat.GUI): dat.GUIController;
            /**
                * Build the edition tool
                * @param parentId the parent id (dom element)
                */
            build(parentId: string): void;
            /**
                * Adds a color element
                * @param parent the parent folder
                * @param name the name of the folder
                * @param color the color reference
                */
            addColor(parent: dat.GUI, name: string, color: Color3 | Color4, callback?: () => void): dat.GUI;
            /**
                * Adds a position element
                * @param parent the parent folder
                * @param name the name of the folder
                * @param vector the vector reference
                */
            addVector(parent: dat.GUI, name: string, vector: Vector2 | Vector3 | Vector4, callback?: () => void): dat.GUI;
            /**
                * Adds a texture controller
                * @param parent the parent folder
                * @param editor the editor reference
                * @param property the property of the object
                * @param object the object which has a texture
                * @param callback: called when changed texture
                */
            addTexture(parent: dat.GUI, editor: Editor, property: string, object: any, allowCubes?: boolean, onlyCubes?: boolean, callback?: (texture: BaseTexture) => void): dat.GUIController;
    }
}

declare module 'babylonjs-editor/editor/gui/tree' {
    import 'jstree';
    export interface TreeNode {
            id: string;
            text: string;
            img?: string;
            data?: any;
    }
    export interface ContextMenuItem {
            id: string;
            text: string;
            callback: () => void;
            img?: string;
    }
    export default class Tree {
            name: string;
            element: JSTree;
            onClick: <T>(id: string, data: T) => void;
            onContextMenu: <T>(id: string, data: T) => ContextMenuItem[];
            onMenuClick: <T>(id: string, node: TreeNode) => void;
            onCanDrag: <T>(id: string, data: T) => boolean;
            onDrag: <T, U>(node: T, parent: U) => boolean;
            protected currentSelectedNode: string;
            protected moving: boolean;
            /**
                * Constructor
                * @param name the tree name
                */
            constructor(name: string);
            /**
                * Clear the tree
                * @param root: the root node from where to remove children. If undefined, root is taken
                */
            clear(root?: string): void;
            /**
                * Adds the given node to the tree
                * @param node: the node to add into the tree
                * @param parent: the optional parent of the node
                */
            add(node: TreeNode, parent?: string): TreeNode;
            /**
                * Deletes the given node
                * @param id the id of the node
                */
            remove(id: string): void;
            /**
                * Selects the given node
                * @param id the id of the node to select
                */
            select(id: string): void;
            /**
                * Returns the selected node
                */
            getSelected(): TreeNode;
            /**
                * Get the given node
                * @param id the id of the node to get
                */
            get(id: string): TreeNode;
            /**
                * Renames the given node
                * @param id the node's id
                * @param name the new name of the node
                */
            rename(id: string, name: string): void;
            /**
                * Expands the given node
                * @param id the id of the node to expand
                */
            expand(id: string): void;
            /**
                * Set parent of the given node (id)
                * @param id the id of the node
                * @param parentId the parent id
                */
            setParent(id: string, parentId: string): void;
            /**
                * Search nodes fitting the given value
                * @param value the value to search
                */
            search(value: string): void;
            /**
                * Destroys the tree
                */
            destroy(): void;
            /**
                * Builds the tree
                * @param parentId the parent id
                */
            build(parentId: string): void;
    }
}

declare module 'babylonjs-editor/editor/edition-tools/edition-tool' {
    import Edition from 'babylonjs-editor/editor/gui/edition';
    import Editor from 'babylonjs-editor/editor/editor';
    export interface IEditionTool<T> {
            editor?: Editor;
            divId: string;
            tabName: string;
            object: T;
            tool: Edition;
            update(object: T): void;
            isSupported(object: any): boolean;
    }
    export default abstract class AbstractEditionTool<T> implements IEditionTool<T> {
            editor: Editor;
            object: T;
            tool: Edition;
            abstract divId: string;
            abstract tabName: string;
            /**
                * Constructor
                */
            constructor();
            /**
                * Updates the edition tool
                * @param object: the object to edit
                */
            update(object: T): void;
            /**
                * Sets the name of the tool's tab
                * @param name the new name of the tab
                */
            protected setTabName(name: string): void;
            /**
                * Returns if the object is supported by the edition tool
                * @param object: the object to test
                */
            abstract isSupported(object: any): boolean;
    }
}

declare module 'babylonjs-editor/editor/typings/typings' {
    export interface IStringDictionary<T> {
        [index: string]: T;
    }
    export interface INumberDictionary<T> {
        [index: number]: T;
    }
    export interface IDisposable {
        dispose(): void;
    }
}

declare module 'babylonjs-editor/editor/typings/plugin' {
    import Editor from 'babylonjs-editor/editor/editor';
    import Layout from 'babylonjs-editor/editor/gui/layout';
    /**
        * Interface representing an editor plugin
        */
    export interface IEditorPlugin {
            divElement: HTMLDivElement;
            name: string;
            create(): Promise<void>;
            close(): Promise<void>;
            onHide?(): Promise<void>;
            onShow?(...params: any[]): Promise<void>;
            onReload?(): Promise<void>;
    }
    /**
        * Represents an exported editor plugin
        */
    export type EditorPluginConstructor = {
            default: new (editor: Editor, ...params: any[]) => IEditorPlugin;
    };
    /**
        * Abstract class representing an editor plugin
        */
    export abstract class EditorPlugin implements IEditorPlugin {
            editor: Editor;
            divElement: HTMLDivElement;
            name: string;
            /**
                * Constructor
                * @param name: the plugin's name
                */
            constructor(name: string);
            /**
                * Creates the plugin
                */
            abstract create(): Promise<void>;
            /**
                * Closes the plugin
                */
            close(): Promise<void>;
            /**
                * Resizes the current layout giving tabs to draw and hide
                * @param layout the layout to resize
                * @param keep the panels to keep
                * @param hide the panels to hide
                */
            protected resizeLayout(layout: Layout, keep: string[], hide: string[]): void;
            /**
                * On load the extension for the first time
                */
            static OnLoaded(editor: Editor): void;
            static _Loaded: boolean;
    }
}

declare module 'babylonjs-editor/editor/typings/project' {
    import { Vector2, Vector3, Quaternion, Color3, Scene, Material, RenderTargetTexture, ReflectionProbe } from 'babylonjs';
    import { IStringDictionary } from 'babylonjs-editor/editor/typings/typings';
    /**
     * Animations
     */
    export interface AnimationEventValue {
        property?: string;
        value?: number | boolean | Vector2 | Vector3 | Color3 | Quaternion;
    }
    export interface AnimationEvent {
        type: string;
        target: Node | Scene;
        value: AnimationEventValue;
    }
    export interface AnimationEventFrame {
        frame: number;
        events: AnimationEvent[];
    }
    export interface Animation {
        targetName: string;
        targetType: string;
        serializationObject: any;
        events: AnimationEventFrame[];
    }
    /**
     *  Global animation configuration of the project
     */
    export interface AnimationConfigurationOnPlay {
        type: string;
        name: string;
    }
    export interface AnimationConfiguration {
        globalAnimationSpeed: number;
        animatedAtLaunch: AnimationConfigurationOnPlay[];
        framesPerSecond: number;
    }
    /**
     * Custom Materials (sky, gradient, water, etc.)
     */
    export interface ProjectMaterial {
        serializedValues: any;
        meshesNames?: string[];
        newInstance?: boolean;
        _babylonMaterial?: Material;
    }
    /**
     * Custom physics impostors
     */
    export interface PhysicsImpostor {
        physicsMass: number;
        physicsFriction: number;
        physicsRestitution: number;
        physicsImpostor: number;
    }
    /**
     * Modified nodes in the editor (custom animations, for custom materials, etc.)
     */
    export interface Node {
        name: string;
        id: string;
        type: string;
        animations: Animation[];
        actions?: any;
        physics?: PhysicsImpostor;
        serializationObject?: any;
    }
    /**
     * Custom particle systems
     */
    export interface ParticleSystem {
        hasEmitter: boolean;
        serializationObject: any;
        emitterPosition?: number[];
    }
    /**
     * Lens Flares
     */
    export interface LensFlare {
        serializationObject: any;
    }
    /**
     * Render targets
     */
    export interface RenderTarget {
        isProbe: boolean;
        serializationObject: any;
        waitingTexture?: RenderTargetTexture | ReflectionProbe;
    }
    /**
     * Sounds
     */
    export interface Sound {
        name: string;
        serializationObject: any;
    }
    export interface EffectLayer {
        name: string;
        serializationObject: any;
    }
    /**
     * Root object of project
     */
    export interface ProjectRoot {
        globalConfiguration: AnimationConfiguration;
        materials: ProjectMaterial[];
        particleSystems: ParticleSystem[];
        nodes: Node[];
        shadowGenerators: any[];
        lensFlares: LensFlare[];
        renderTargets: RenderTarget[];
        sounds: Sound[];
        actions: any;
        physicsEnabled: boolean;
        effectLayers: EffectLayer[];
        requestedMaterials?: string[];
        customMetadatas?: IStringDictionary<any>;
        gui: any[];
    }
}

declare module 'babylonjs-editor/editor/core' {
    import { Engine, Scene, Observable } from 'babylonjs';
    import { AdvancedDynamicTexture } from 'babylonjs-gui';
    export interface IUpdatable {
            /**
                * On before render the scene
                */
            onPreUpdate?(): void;
            /**
                * On after render the scene
                */
            onPostUpdate?(): void;
    }
    export default class Core {
            engine: Engine;
            scenes: Scene[];
            scene: Scene;
            uiTextures: AdvancedDynamicTexture[];
            currentSelectedObject: any;
            updates: IUpdatable[];
            onSelectObject: Observable<any>;
            onResize: Observable<{}>;
            onAddObject: Observable<{}>;
            onGlobalPropertyChange: Observable<{
                    baseObject?: any;
                    object: any;
                    property: string;
                    value: any;
                    initialValue: any;
            }>;
            renderScenes: boolean;
            /**
                * Constructor
                */
            constructor();
            /**
                * Removes the given scene from the registered scenes
                * @param scene: the scene reference to remove
                */
            removeScene(scene: Scene, dispose?: boolean): boolean;
            /**
                * Removes the given UI (advanced texture) from the registered UIS
                * @param ui: the ui advanced texture reference to remove
                */
            removeUI(ui: AdvancedDynamicTexture, dispose?: boolean): boolean;
            /**
                * Updates the rendering + notify updaters
                */
            update(): void;
    }
}

declare module 'babylonjs-editor/editor/gui/resizable-layout' {
    import * as GoldenLayout from 'golden-layout';
    import { IStringDictionary } from 'babylonjs-editor/editor/typings/typings';
    export type ComponentConfig = GoldenLayout.ComponentConfig & {
            html?: HTMLElement | string | (() => HTMLElement);
            onClose?: () => void;
            onClick?: () => void;
    };
    export type ItemConfigType = GoldenLayout.ItemConfig | ComponentConfig;
    export default class ResizableLayout {
            element: GoldenLayout;
            name: string;
            panels: ItemConfigType[];
            showCloseIcon: boolean;
            onPanelResize: () => void;
            protected containers: IStringDictionary<GoldenLayout.Container>;
            /**
                * Constructor
                * @param name the resizable layout name
                */
            constructor(name: string);
            /**
                * Returns the size of the given panel
                * @param type: the component name
                */
            getPanelSize(name: string): {
                    width: number;
                    height: number;
            };
            /**
                * Sets the given panel size
                * @param name the panel's name
                * @param value the new size of the panel
                */
            setPanelSize(name: string, value: number): void;
            /**
                * Shows the given tab
                * @param name the tab to show
                */
            showPanelTab(name: string): void;
            /**
                * Removes the given panel
                * @param name the name of the panel to remove
                */
            removePanel(name: string): void;
            /**
                * Adds a panel to the layout
                * @param stackId: the stack to add component in
                * @param config: the panel's configuration
                */
            addPanelToStack(stackId: string, config: ComponentConfig): void;
            /**
                * Builds the resizable layout
                * @param parentId the parent id
                */
            build(parentId: string): void;
    }
}

declare module 'babylonjs-editor/editor/components/toolbar' {
    import Editor from 'babylonjs-editor/editor/editor';
    import { IEditorPlugin } from 'babylonjs-editor/editor/typings/plugin';
    import Toolbar from 'babylonjs-editor/editor/gui/toolbar';
    export default class EditorToolbar {
            protected editor: Editor;
            main: Toolbar;
            tools: Toolbar;
            /**
                * Constructor
                * @param editor: the editor's reference
                */
            constructor(editor: Editor);
            /**
                * Sets a click and the given item's id
                * @param id the id of the item to click
                */
            setToolClicked(id: string): void;
            /**
                * Once the user clicks on a menu of the main toolbar
                * @param target the target element
                */
            protected onMainClick(target: string): Promise<void>;
            /**
                * Once the user clicks on a menu of the tools toolbar
                * @param target the target element
                */
            protected onToolsClick(target: string): void;
            /**
                * Loads an editor tool and add it in the edit-panel
                * @param url the URL of the tool
                * @param name: the name of the tool to draw when locking the panel
                */
            protected loadTool(url: string, name: string): Promise<IEditorPlugin>;
    }
}

declare module 'babylonjs-editor/editor/components/graph' {
    import { Scene, Node } from 'babylonjs';
    import Editor from 'babylonjs-editor/editor/editor';
    import Tree, { TreeNode } from 'babylonjs-editor/editor/gui/tree';
    export default class EditorGraph {
            protected editor: Editor;
            tree: Tree;
            root: string;
            gui: string;
            currentObject: any;
            /**
                * Constructor
                * @param editor the editor reference
                */
            constructor(editor: Editor);
            /**
             * Rename the node with id "id"
             * @param id the id of the node
             * @param name the new name/id
             */
            renameNode(id: string, name: string): void;
            /**
                * Set parent of the given node (id)
                * @param id the id of the node
                * @param parentId the parent id
                */
            setParent(id: string, parentId: string): void;
            /**
                * Adds a new node
                * @param node: the node to add
                * @param parentId: the parent id of the node to add
                */
            add(node: TreeNode, parentId: string): void;
            /**
                * Selects the given node id
                * @param id the node id
                */
            select(id: string): void;
            /**
                * Returns the selected node id
                */
            getSelected(): TreeNode;
            /**
                * Returns a anode
                * @param data: the data to search
                */
            getByData(data: any): TreeNode;
            /**
                * Clears the graph
                */
            clear(): void;
            /**
                * Fills the tree
                * @param scene: the root scene
                * @param root: the root node
                */
            fill(scene?: Scene, root?: Node): void;
            /**
             * Returns the icon related to the object type
             * @param object
             */
            getIcon(obj: any): string;
            /**
                * Fills the sounds giving the scene and the root node (attached mesh or scene)
                * @param scene: the scene containing the sound
                * @param root: the root node to check
                */
            protected fillSounds(scene: Scene, root: Scene | Node): number;
            /**
                * Fills the GUI advanced textures
                * @param root: the node to check GUI is attached to
                */
            protected fillGuiTextures(root: Node): number;
            /**
                * On the user clicks on a context menu item
                * @param id the context menu item id
                * @param node the related tree node
                */
            protected onMenuClick(id: string): void;
    }
}

declare module 'babylonjs-editor/editor/components/edition' {
    /**
        * Edition tools
        */
    import { IEditionTool } from 'babylonjs-editor/editor/edition-tools/edition-tool';
    import Editor from 'babylonjs-editor/editor/editor';
    export default class EditorEditionTools {
            protected editor: Editor;
            tools: IEditionTool<any>[];
            currentTools: IEditionTool<any>[];
            root: string;
            tabs: W2UI.W2Tabs;
            currentObject: any;
            protected lastTabName: string;
            /**
                * Constructor
                * @param editor: the editor's reference
                */
            constructor(editor: Editor, rootDiv?: string);
            /**
                * Resizes the edition tools
                * @param width the width of the panel
                */
            resize(width: number): void;
            /**
                * Add the given tool (IEditionTool)
                * @param tool the tool to add
                */
            addTool(tool: IEditionTool<any>): void;
            /**
                * Sets the object to edit
                * @param object the object to edit
                */
            setObject(object: any): void;
            /**
                * Refresh the edition tool
                */
            refresh(): void;
            /**
                * Updates the display of all visible edition tools
                */
            updateDisplay(): void;
            /**
                * When a tab changed
                * @param target the target tab Id
                */
            protected changeTab(target: string): void;
    }
}

declare module 'babylonjs-editor/editor/components/edit-panel' {
    import Editor from 'babylonjs-editor/editor/editor';
    import { IEditorPlugin } from 'babylonjs-editor/editor/typings/plugin';
    export default class EditorEditPanel {
            protected editor: Editor;
            static PluginCount: number;
            protected currentPlugin: IEditorPlugin;
            /**
                * Constructor
                * @param editor: the editor reference
                */
            constructor(editor: Editor);
            /**
                * Adds the given plugin to the
                * @param plugin the plugin to add
                */
            addPlugin(pluginUrl: string): void;
            /**
                * Shows the given plugin
                * @param plugin: the plugin to show
                */
            showPlugin(plugin: IEditorPlugin, ...params: any[]): Promise<void>;
    }
}

declare module 'babylonjs-editor/editor/components/stats' {
    import Editor from 'babylonjs-editor/editor/editor';
    import Layout from 'babylonjs-editor/editor/gui/layout';
    export default class Stats {
            editor: Editor;
            layout: Layout;
            renderingDiv: JQuery<HTMLDivElement>;
            averageFPS: JQuery<HTMLElement>;
            instantaneousFPS: JQuery<HTMLElement>;
            averageFrameTime: JQuery<HTMLElement>;
            sceneDiv: JQuery<HTMLDivElement>;
            texturesCount: JQuery<HTMLElement>;
            materialsCount: JQuery<HTMLElement>;
            compiledEffects: JQuery<HTMLElement>;
            frameInterval: number;
            /**
                * Constructor
                * @param editor the editor reference
                */
            constructor(editor: Editor);
            /**
                * Update the stats
                */
            updateStats(): void;
    }
}

declare module 'babylonjs-editor/editor/scene/scene-picker' {
    import { Scene, AbstractMesh, Mesh, PositionGizmo, RotationGizmo, ScaleGizmo, UtilityLayerRenderer, Observer, PointerInfo } from 'babylonjs';
    import Editor from 'babylonjs-editor/editor/editor';
    export enum GizmoType {
            NONE = 0,
            POSITION = 1,
            ROTATION = 2,
            SCALING = 3,
    }
    export default class ScenePicker {
            editor: Editor;
            scene: Scene;
            canvas: HTMLCanvasElement;
            gizmosLayer: UtilityLayerRenderer;
            onPickedMesh: (mesh: AbstractMesh) => void;
            onUpdateMesh: (mesh: AbstractMesh) => void;
            protected lastMesh: AbstractMesh;
            protected lastX: number;
            protected lastY: number;
            protected onCanvasPointer: Observer<PointerInfo>;
            protected positionGizmo: PositionGizmo;
            protected rotationGizmo: RotationGizmo;
            protected scalingGizmo: ScaleGizmo;
            protected currentGizmo: PositionGizmo | RotationGizmo | ScaleGizmo;
            /**
                * Constructor
                * @param editor: the editor reference
                * @param canvas: the canvas to track
                */
            constructor(editor: Editor, scene: Scene, canvas: HTMLCanvasElement);
            /**
                * Sets if the scene picker is enabled
                */
            enabled: boolean;
            /**
                * Sets the gizmo type
                */
            gizmoType: GizmoType;
            /**
                * Sets the attached mesh for position, rotaiton and scaling gizmos
                * @param mesh the mesh to attach
                */
            setGizmoAttachedMesh(mesh: Mesh): void;
            /**
                * Adds the events to the canvas
                */
            addEvents(): void;
            /**
                * Removes the scene picker events from the canvas
                */
            removeEvents(): void;
            /**
                * Adds undo redo
                * @param delta the delta value (from / to)
                * @param axis the moved axis
                */
            protected undoRedo(axis: 'x' | 'y' | 'z'): void;
            /**
                * Called when canvas mouse is down
                * @param ev the mouse event
                */
            protected canvasDown(ev: MouseEvent): void;
            /**
                * Called when canvas mouse is up
                * @param ev the mouse event
                */
            protected canvasClick(ev: MouseEvent): void;
            /**
                * Called when mouse moves on canvas
                * @param ev the mouse event
                */
            protected canvasMove(ev: MouseEvent): void;
            /**
                * Called when double click on the canvas
                * @param ev: the mouse event
                */
            protected canvasDblClick(ev: MouseEvent): void;
    }
}

declare module 'babylonjs-editor/editor/scene/scene-icons' {
    import { Scene, Mesh, Texture, StandardMaterial, SubMesh, _InstancesBatch } from 'babylonjs';
    import Editor from 'babylonjs-editor/editor/editor';
    export default class SceneIcons {
            scene: Scene;
            cameraTexture: Texture;
            lightTexture: Texture;
            particleTexture: Texture;
            plane: Mesh;
            material: StandardMaterial;
            protected editor: Editor;
            /**
                * Constructor
                * @param editor: the editor instance
                */
            constructor(editor: Editor);
            /**
                * On post update the scenes
                */
            onPostUpdate(): void;
            /**
                * Render the given objects
                * @param batch: the instances render list
                * @param subMesh: the submesh to render
                * @param nodes: the nodes to render
                * @param configure: callback to know if render or not the node
                */
            protected renderPlane(batch: _InstancesBatch, subMesh: SubMesh, nodes: any[], configure: (node: any) => boolean): void;
            /**
                * Creates a new texture
                * @param url: the url of the texture
                */
            protected createTexture(url: string): Texture;
    }
}

